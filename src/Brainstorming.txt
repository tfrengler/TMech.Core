public class Element
{
  public WebElement WrappedElement { get; private set; }
  public ElementFactory ProducedBy { get; }
  public By RelatedLocator { get; }
  public ISearchContext RelatedContext { get; private set; }
  public bool LocatedAsMultiple { get; }
  public uint ActionAttempts { get; private set; } = 50;
  public Guid Identifier { get; }
  public IEnumerable<Element> GetElementChain()
  public Element Reacquire(bool throwOnError)
  public Element TryActionsThisManyTimes(uint attempts)
  public Element DoNotReacquireElementIfStale()
  public WebElement UnWrap()
  public Element Click()
  public Element ClickUntil(Func<Element, bool> predicate)
  public Element ScrollIntoView()
  public Element SendKeys(string input, bool clear = true)
  public Element Clear(bool usingKeystrokes = false)
  public string GetFormControlType()
  public ImmutableList<string> GetAttributeNames()
  public ImmutableDictionary<string, string> GetAttributes()
  public ImmutableDictionary<string, string> GetDataSet()
  public string GetHTML()
  public string GetId()
  public string GetTagName()
  public string GetText(bool removeAdditionalWhitespace = true)
  public string GetAttribute(string attributeName)
  public bool IsDisplayed()
  public ElementFactory Elements()
  public ElementFactory Elements(TimeSpan timeout)
}

public sealed class ElementFactory
{
  public TimeSpan DefaultTimeout { get; } = TimeSpan.FromSeconds(5.0d);
  public uint PollingInterval { get; set; } = 300;
  public TimeSpan Timeout { get; }
  public ISearchContext SearchContext { get; private set; }
  public Element? SpawnedBy { get; init; }
  public ElementFactory(ISearchContext context)
  public ElementFactory(ISearchContext context, TimeSpan timeout)
  public Element Fetch(By locator)
  public Element Fetch(By locator, TimeSpan timeout)
  public Element[] FetchAll(By locator, uint threshold = 1)
  public Element[] FetchAll(By locator, TimeSpan timeout, uint threshold = 1)
  public bool TryFetch(By locator, [NotNullWhen(true)] out Element element, [NotNullWhen(false)] out Exception error)
  public bool TryFetch(By locator, TimeSpan timeout, [NotNullWhen(true)] out Element element, [NotNullWhen(false)] out Exception error)
  public bool TryFetchAll(By locator, out Element[] elements, uint threshold = 1)
  public bool TryFetchAll(By locator, TimeSpan timeout, out Element[] elements, uint threshold = 1)
  public ElementWaiter FetchWhen(By locator)
  public ElementWaiter FetchWhen(By locator, TimeSpan timeout)
  public bool Exists(By locator)
  public int Count(By locator)
}

public sealed class ElementWaiter
{
  public ElementWaiter(ElementFactory factory, By locator, TimeSpan timeout)
  public ElementFactory WrappedFactory { get; }
  public By Locator { get; }
  public TimeSpan Timeout { get; }
  public Element IsDisplayed()
  public Element IsNotDisplayed()
  public Element IsNotEnabled()
  public Element IsEnabled()
  public Element IsSelected()
  public Element IsNotSelected()
  public Element AttributeIsEqualTo(string attributeName, string attributeValue)
  public Element AttributeStartsWith(string attributeName, string attributeValue)
  public Element AttributeEndsWith(string attributeName, string attributeValue)
  public Element AttributeContains(string attributeName, string attributeValue)
  public Element AttributeHasContent(string attributeName)
  public Element ContentIsEqualTo(string text)
  public Element ContentIsNotEqualTo(string text)
  public Element ContentStartsWith(string text)
  public Element ContentEndsWith(string text)
  public Element ContentContains(string text)
  public Element HasContent()
  public Element IsClickable()
}

public class FormControlElement : Element
{
  public FormControlElement WithRobustSelection()
  public void SetValue(string input, bool clear = true)
  public void UploadFile(string input)
  public string GetValue()
  public string GetName()
  public string GetInputType()
  public int? GetMin()
  public int? GetMax()
  public int? GetMaxLength()
  public int? GetMinLength()
  public string GetSource()
  public int? GetStep()
  public bool IsRequired()
  public bool IsReadOnly()
  public bool IsEnabled()
}

public sealed class NumericElement : FormControlElement
{
  public new IntegerElement WithRobustSelection()
  public int? GetValueAsInteger()
  public int? GetValueAsFloat(NumberFormatInfo? format = null)
  public int? GetValueAsDouble(NumberFormatInfo? format = null)
  public void SetNumeric(int number)
  public void SetNumeric(float number)
  public void SetNumeric(double number)
}

public sealed class DropdownElement : FormControlElement
{
  public new DropdownElement WithRobustSelection()
  public bool IsMultiple()
  public void SetDropdownItemByValue(string value)
  public void UnsetDropdownItemByText(string text)
  public void UnsetDropdownItemByValue(string value)
  public void SetDropdownItemByText(string text, bool partialMatch = false)
  public FormControlElement GetSelectedOption()
  public IList<FormControlElement> GetSelectedOptions()
  public IList<FormControlElement> GetAvailableOptions()
}

public sealed class DateElement : FormControlElement
{
  public new DateElement WithRobustSelection()
  public const string ValueAttributeFormat = "yyyy-MM-dd";
  public const string ChromiumFormat = "ddMMyyyy";
  public const string FirefoxFormat = "MMddyyyy";
  public DateOnly GetDate()
  public DateOnly GetDate(string format = ValueAttributeFormat)
  public void SetDateByKeystroke(DateTime input, string format)
  public void SetDateByKeystroke(DateOnly input, string format)
  public void SetDate(DateTime input)
  public void SetDate(DateOnly input)
}

public sealed class BooleanElement : FormControlElement
{
  public new BooleanElement WithRobustSelection()
  public void Select()
  public void Select(bool desiredState)
  public void Deselect()
  public bool IsSelected()
}